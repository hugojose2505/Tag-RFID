
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Register_hours
 * 
 */
export type Register_hours = $Result.DefaultSelection<Prisma.$Register_hoursPayload>
/**
 * Model ServiceOrder
 * 
 */
export type ServiceOrder = $Result.DefaultSelection<Prisma.$ServiceOrderPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.register_hours`: Exposes CRUD operations for the **Register_hours** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Register_hours
    * const register_hours = await prisma.register_hours.findMany()
    * ```
    */
  get register_hours(): Prisma.Register_hoursDelegate<ExtArgs>;

  /**
   * `prisma.serviceOrder`: Exposes CRUD operations for the **ServiceOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ServiceOrders
    * const serviceOrders = await prisma.serviceOrder.findMany()
    * ```
    */
  get serviceOrder(): Prisma.ServiceOrderDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.6.0
   * Query Engine version: e95e739751f42d8ca026f6b910f5a2dc5adeaeee
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Register_hours: 'Register_hours',
    ServiceOrder: 'ServiceOrder'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'register_hours' | 'serviceOrder'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Register_hours: {
        payload: Prisma.$Register_hoursPayload<ExtArgs>
        fields: Prisma.Register_hoursFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Register_hoursFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Register_hoursPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Register_hoursFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Register_hoursPayload>
          }
          findFirst: {
            args: Prisma.Register_hoursFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Register_hoursPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Register_hoursFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Register_hoursPayload>
          }
          findMany: {
            args: Prisma.Register_hoursFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Register_hoursPayload>[]
          }
          create: {
            args: Prisma.Register_hoursCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Register_hoursPayload>
          }
          createMany: {
            args: Prisma.Register_hoursCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Register_hoursDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Register_hoursPayload>
          }
          update: {
            args: Prisma.Register_hoursUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Register_hoursPayload>
          }
          deleteMany: {
            args: Prisma.Register_hoursDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Register_hoursUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Register_hoursUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Register_hoursPayload>
          }
          aggregate: {
            args: Prisma.Register_hoursAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRegister_hours>
          }
          groupBy: {
            args: Prisma.Register_hoursGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Register_hoursGroupByOutputType>[]
          }
          count: {
            args: Prisma.Register_hoursCountArgs<ExtArgs>,
            result: $Utils.Optional<Register_hoursCountAggregateOutputType> | number
          }
        }
      }
      ServiceOrder: {
        payload: Prisma.$ServiceOrderPayload<ExtArgs>
        fields: Prisma.ServiceOrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServiceOrderFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceOrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServiceOrderFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceOrderPayload>
          }
          findFirst: {
            args: Prisma.ServiceOrderFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceOrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServiceOrderFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceOrderPayload>
          }
          findMany: {
            args: Prisma.ServiceOrderFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceOrderPayload>[]
          }
          create: {
            args: Prisma.ServiceOrderCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceOrderPayload>
          }
          createMany: {
            args: Prisma.ServiceOrderCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ServiceOrderDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceOrderPayload>
          }
          update: {
            args: Prisma.ServiceOrderUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceOrderPayload>
          }
          deleteMany: {
            args: Prisma.ServiceOrderDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ServiceOrderUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ServiceOrderUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceOrderPayload>
          }
          aggregate: {
            args: Prisma.ServiceOrderAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateServiceOrder>
          }
          groupBy: {
            args: Prisma.ServiceOrderGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ServiceOrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServiceOrderCountArgs<ExtArgs>,
            result: $Utils.Optional<ServiceOrderCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    register_hours: number
    service_orders: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    register_hours?: boolean | UserCountOutputTypeCountRegister_hoursArgs
    service_orders?: boolean | UserCountOutputTypeCountService_ordersArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRegister_hoursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Register_hoursWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountService_ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceOrderWhereInput
  }



  /**
   * Count Type ServiceOrderCountOutputType
   */

  export type ServiceOrderCountOutputType = {
    register_hours: number
    users: number
  }

  export type ServiceOrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    register_hours?: boolean | ServiceOrderCountOutputTypeCountRegister_hoursArgs
    users?: boolean | ServiceOrderCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes

  /**
   * ServiceOrderCountOutputType without action
   */
  export type ServiceOrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceOrderCountOutputType
     */
    select?: ServiceOrderCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ServiceOrderCountOutputType without action
   */
  export type ServiceOrderCountOutputTypeCountRegister_hoursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Register_hoursWhereInput
  }


  /**
   * ServiceOrderCountOutputType without action
   */
  export type ServiceOrderCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    tag: string | null
    name: string | null
    cpf: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    tag: string | null
    name: string | null
    cpf: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    tag: number
    name: number
    cpf: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    tag?: true
    name?: true
    cpf?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    tag?: true
    name?: true
    cpf?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    tag?: true
    name?: true
    cpf?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    tag: string
    name: string
    cpf: string
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tag?: boolean
    name?: boolean
    cpf?: boolean
    register_hours?: boolean | User$register_hoursArgs<ExtArgs>
    service_orders?: boolean | User$service_ordersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    tag?: boolean
    name?: boolean
    cpf?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    register_hours?: boolean | User$register_hoursArgs<ExtArgs>
    service_orders?: boolean | User$service_ordersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      register_hours: Prisma.$Register_hoursPayload<ExtArgs>[]
      service_orders: Prisma.$ServiceOrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tag: string
      name: string
      cpf: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    register_hours<T extends User$register_hoursArgs<ExtArgs> = {}>(args?: Subset<T, User$register_hoursArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Register_hoursPayload<ExtArgs>, T, 'findMany'> | Null>;

    service_orders<T extends User$service_ordersArgs<ExtArgs> = {}>(args?: Subset<T, User$service_ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceOrderPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly tag: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly cpf: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.register_hours
   */
  export type User$register_hoursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Register_hours
     */
    select?: Register_hoursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Register_hoursInclude<ExtArgs> | null
    where?: Register_hoursWhereInput
    orderBy?: Register_hoursOrderByWithRelationInput | Register_hoursOrderByWithRelationInput[]
    cursor?: Register_hoursWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Register_hoursScalarFieldEnum | Register_hoursScalarFieldEnum[]
  }


  /**
   * User.service_orders
   */
  export type User$service_ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceOrder
     */
    select?: ServiceOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceOrderInclude<ExtArgs> | null
    where?: ServiceOrderWhereInput
    orderBy?: ServiceOrderOrderByWithRelationInput | ServiceOrderOrderByWithRelationInput[]
    cursor?: ServiceOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceOrderScalarFieldEnum | ServiceOrderScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Register_hours
   */

  export type AggregateRegister_hours = {
    _count: Register_hoursCountAggregateOutputType | null
    _min: Register_hoursMinAggregateOutputType | null
    _max: Register_hoursMaxAggregateOutputType | null
  }

  export type Register_hoursMinAggregateOutputType = {
    id_register: string | null
    id_user: string | null
    id_order: string | null
    input: Date | null
    exit: Date | null
    active: boolean | null
    created_at: Date | null
    updated_at: Date | null
    delete_at: Date | null
  }

  export type Register_hoursMaxAggregateOutputType = {
    id_register: string | null
    id_user: string | null
    id_order: string | null
    input: Date | null
    exit: Date | null
    active: boolean | null
    created_at: Date | null
    updated_at: Date | null
    delete_at: Date | null
  }

  export type Register_hoursCountAggregateOutputType = {
    id_register: number
    id_user: number
    id_order: number
    input: number
    exit: number
    active: number
    created_at: number
    updated_at: number
    delete_at: number
    _all: number
  }


  export type Register_hoursMinAggregateInputType = {
    id_register?: true
    id_user?: true
    id_order?: true
    input?: true
    exit?: true
    active?: true
    created_at?: true
    updated_at?: true
    delete_at?: true
  }

  export type Register_hoursMaxAggregateInputType = {
    id_register?: true
    id_user?: true
    id_order?: true
    input?: true
    exit?: true
    active?: true
    created_at?: true
    updated_at?: true
    delete_at?: true
  }

  export type Register_hoursCountAggregateInputType = {
    id_register?: true
    id_user?: true
    id_order?: true
    input?: true
    exit?: true
    active?: true
    created_at?: true
    updated_at?: true
    delete_at?: true
    _all?: true
  }

  export type Register_hoursAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Register_hours to aggregate.
     */
    where?: Register_hoursWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Register_hours to fetch.
     */
    orderBy?: Register_hoursOrderByWithRelationInput | Register_hoursOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Register_hoursWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Register_hours from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Register_hours.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Register_hours
    **/
    _count?: true | Register_hoursCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Register_hoursMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Register_hoursMaxAggregateInputType
  }

  export type GetRegister_hoursAggregateType<T extends Register_hoursAggregateArgs> = {
        [P in keyof T & keyof AggregateRegister_hours]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRegister_hours[P]>
      : GetScalarType<T[P], AggregateRegister_hours[P]>
  }




  export type Register_hoursGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Register_hoursWhereInput
    orderBy?: Register_hoursOrderByWithAggregationInput | Register_hoursOrderByWithAggregationInput[]
    by: Register_hoursScalarFieldEnum[] | Register_hoursScalarFieldEnum
    having?: Register_hoursScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Register_hoursCountAggregateInputType | true
    _min?: Register_hoursMinAggregateInputType
    _max?: Register_hoursMaxAggregateInputType
  }

  export type Register_hoursGroupByOutputType = {
    id_register: string
    id_user: string
    id_order: string
    input: Date | null
    exit: Date | null
    active: boolean | null
    created_at: Date
    updated_at: Date | null
    delete_at: Date | null
    _count: Register_hoursCountAggregateOutputType | null
    _min: Register_hoursMinAggregateOutputType | null
    _max: Register_hoursMaxAggregateOutputType | null
  }

  type GetRegister_hoursGroupByPayload<T extends Register_hoursGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Register_hoursGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Register_hoursGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Register_hoursGroupByOutputType[P]>
            : GetScalarType<T[P], Register_hoursGroupByOutputType[P]>
        }
      >
    >


  export type Register_hoursSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_register?: boolean
    id_user?: boolean
    id_order?: boolean
    input?: boolean
    exit?: boolean
    active?: boolean
    created_at?: boolean
    updated_at?: boolean
    delete_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    order?: boolean | ServiceOrderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["register_hours"]>

  export type Register_hoursSelectScalar = {
    id_register?: boolean
    id_user?: boolean
    id_order?: boolean
    input?: boolean
    exit?: boolean
    active?: boolean
    created_at?: boolean
    updated_at?: boolean
    delete_at?: boolean
  }

  export type Register_hoursInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    order?: boolean | ServiceOrderDefaultArgs<ExtArgs>
  }


  export type $Register_hoursPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Register_hours"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      order: Prisma.$ServiceOrderPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_register: string
      id_user: string
      id_order: string
      input: Date | null
      exit: Date | null
      active: boolean | null
      created_at: Date
      updated_at: Date | null
      delete_at: Date | null
    }, ExtArgs["result"]["register_hours"]>
    composites: {}
  }


  type Register_hoursGetPayload<S extends boolean | null | undefined | Register_hoursDefaultArgs> = $Result.GetResult<Prisma.$Register_hoursPayload, S>

  type Register_hoursCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Register_hoursFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: Register_hoursCountAggregateInputType | true
    }

  export interface Register_hoursDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Register_hours'], meta: { name: 'Register_hours' } }
    /**
     * Find zero or one Register_hours that matches the filter.
     * @param {Register_hoursFindUniqueArgs} args - Arguments to find a Register_hours
     * @example
     * // Get one Register_hours
     * const register_hours = await prisma.register_hours.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Register_hoursFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Register_hoursFindUniqueArgs<ExtArgs>>
    ): Prisma__Register_hoursClient<$Result.GetResult<Prisma.$Register_hoursPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Register_hours that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Register_hoursFindUniqueOrThrowArgs} args - Arguments to find a Register_hours
     * @example
     * // Get one Register_hours
     * const register_hours = await prisma.register_hours.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Register_hoursFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Register_hoursFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Register_hoursClient<$Result.GetResult<Prisma.$Register_hoursPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Register_hours that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Register_hoursFindFirstArgs} args - Arguments to find a Register_hours
     * @example
     * // Get one Register_hours
     * const register_hours = await prisma.register_hours.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Register_hoursFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Register_hoursFindFirstArgs<ExtArgs>>
    ): Prisma__Register_hoursClient<$Result.GetResult<Prisma.$Register_hoursPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Register_hours that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Register_hoursFindFirstOrThrowArgs} args - Arguments to find a Register_hours
     * @example
     * // Get one Register_hours
     * const register_hours = await prisma.register_hours.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Register_hoursFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Register_hoursFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Register_hoursClient<$Result.GetResult<Prisma.$Register_hoursPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Register_hours that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Register_hoursFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Register_hours
     * const register_hours = await prisma.register_hours.findMany()
     * 
     * // Get first 10 Register_hours
     * const register_hours = await prisma.register_hours.findMany({ take: 10 })
     * 
     * // Only select the `id_register`
     * const register_hoursWithId_registerOnly = await prisma.register_hours.findMany({ select: { id_register: true } })
     * 
    **/
    findMany<T extends Register_hoursFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Register_hoursFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Register_hoursPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Register_hours.
     * @param {Register_hoursCreateArgs} args - Arguments to create a Register_hours.
     * @example
     * // Create one Register_hours
     * const Register_hours = await prisma.register_hours.create({
     *   data: {
     *     // ... data to create a Register_hours
     *   }
     * })
     * 
    **/
    create<T extends Register_hoursCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Register_hoursCreateArgs<ExtArgs>>
    ): Prisma__Register_hoursClient<$Result.GetResult<Prisma.$Register_hoursPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Register_hours.
     *     @param {Register_hoursCreateManyArgs} args - Arguments to create many Register_hours.
     *     @example
     *     // Create many Register_hours
     *     const register_hours = await prisma.register_hours.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Register_hoursCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Register_hoursCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Register_hours.
     * @param {Register_hoursDeleteArgs} args - Arguments to delete one Register_hours.
     * @example
     * // Delete one Register_hours
     * const Register_hours = await prisma.register_hours.delete({
     *   where: {
     *     // ... filter to delete one Register_hours
     *   }
     * })
     * 
    **/
    delete<T extends Register_hoursDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Register_hoursDeleteArgs<ExtArgs>>
    ): Prisma__Register_hoursClient<$Result.GetResult<Prisma.$Register_hoursPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Register_hours.
     * @param {Register_hoursUpdateArgs} args - Arguments to update one Register_hours.
     * @example
     * // Update one Register_hours
     * const register_hours = await prisma.register_hours.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Register_hoursUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Register_hoursUpdateArgs<ExtArgs>>
    ): Prisma__Register_hoursClient<$Result.GetResult<Prisma.$Register_hoursPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Register_hours.
     * @param {Register_hoursDeleteManyArgs} args - Arguments to filter Register_hours to delete.
     * @example
     * // Delete a few Register_hours
     * const { count } = await prisma.register_hours.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Register_hoursDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Register_hoursDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Register_hours.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Register_hoursUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Register_hours
     * const register_hours = await prisma.register_hours.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Register_hoursUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Register_hoursUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Register_hours.
     * @param {Register_hoursUpsertArgs} args - Arguments to update or create a Register_hours.
     * @example
     * // Update or create a Register_hours
     * const register_hours = await prisma.register_hours.upsert({
     *   create: {
     *     // ... data to create a Register_hours
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Register_hours we want to update
     *   }
     * })
    **/
    upsert<T extends Register_hoursUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Register_hoursUpsertArgs<ExtArgs>>
    ): Prisma__Register_hoursClient<$Result.GetResult<Prisma.$Register_hoursPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Register_hours.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Register_hoursCountArgs} args - Arguments to filter Register_hours to count.
     * @example
     * // Count the number of Register_hours
     * const count = await prisma.register_hours.count({
     *   where: {
     *     // ... the filter for the Register_hours we want to count
     *   }
     * })
    **/
    count<T extends Register_hoursCountArgs>(
      args?: Subset<T, Register_hoursCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Register_hoursCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Register_hours.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Register_hoursAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Register_hoursAggregateArgs>(args: Subset<T, Register_hoursAggregateArgs>): Prisma.PrismaPromise<GetRegister_hoursAggregateType<T>>

    /**
     * Group by Register_hours.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Register_hoursGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Register_hoursGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Register_hoursGroupByArgs['orderBy'] }
        : { orderBy?: Register_hoursGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Register_hoursGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegister_hoursGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Register_hours model
   */
  readonly fields: Register_hoursFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Register_hours.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Register_hoursClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    order<T extends ServiceOrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServiceOrderDefaultArgs<ExtArgs>>): Prisma__ServiceOrderClient<$Result.GetResult<Prisma.$ServiceOrderPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Register_hours model
   */ 
  interface Register_hoursFieldRefs {
    readonly id_register: FieldRef<"Register_hours", 'String'>
    readonly id_user: FieldRef<"Register_hours", 'String'>
    readonly id_order: FieldRef<"Register_hours", 'String'>
    readonly input: FieldRef<"Register_hours", 'DateTime'>
    readonly exit: FieldRef<"Register_hours", 'DateTime'>
    readonly active: FieldRef<"Register_hours", 'Boolean'>
    readonly created_at: FieldRef<"Register_hours", 'DateTime'>
    readonly updated_at: FieldRef<"Register_hours", 'DateTime'>
    readonly delete_at: FieldRef<"Register_hours", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Register_hours findUnique
   */
  export type Register_hoursFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Register_hours
     */
    select?: Register_hoursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Register_hoursInclude<ExtArgs> | null
    /**
     * Filter, which Register_hours to fetch.
     */
    where: Register_hoursWhereUniqueInput
  }


  /**
   * Register_hours findUniqueOrThrow
   */
  export type Register_hoursFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Register_hours
     */
    select?: Register_hoursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Register_hoursInclude<ExtArgs> | null
    /**
     * Filter, which Register_hours to fetch.
     */
    where: Register_hoursWhereUniqueInput
  }


  /**
   * Register_hours findFirst
   */
  export type Register_hoursFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Register_hours
     */
    select?: Register_hoursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Register_hoursInclude<ExtArgs> | null
    /**
     * Filter, which Register_hours to fetch.
     */
    where?: Register_hoursWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Register_hours to fetch.
     */
    orderBy?: Register_hoursOrderByWithRelationInput | Register_hoursOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Register_hours.
     */
    cursor?: Register_hoursWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Register_hours from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Register_hours.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Register_hours.
     */
    distinct?: Register_hoursScalarFieldEnum | Register_hoursScalarFieldEnum[]
  }


  /**
   * Register_hours findFirstOrThrow
   */
  export type Register_hoursFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Register_hours
     */
    select?: Register_hoursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Register_hoursInclude<ExtArgs> | null
    /**
     * Filter, which Register_hours to fetch.
     */
    where?: Register_hoursWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Register_hours to fetch.
     */
    orderBy?: Register_hoursOrderByWithRelationInput | Register_hoursOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Register_hours.
     */
    cursor?: Register_hoursWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Register_hours from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Register_hours.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Register_hours.
     */
    distinct?: Register_hoursScalarFieldEnum | Register_hoursScalarFieldEnum[]
  }


  /**
   * Register_hours findMany
   */
  export type Register_hoursFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Register_hours
     */
    select?: Register_hoursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Register_hoursInclude<ExtArgs> | null
    /**
     * Filter, which Register_hours to fetch.
     */
    where?: Register_hoursWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Register_hours to fetch.
     */
    orderBy?: Register_hoursOrderByWithRelationInput | Register_hoursOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Register_hours.
     */
    cursor?: Register_hoursWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Register_hours from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Register_hours.
     */
    skip?: number
    distinct?: Register_hoursScalarFieldEnum | Register_hoursScalarFieldEnum[]
  }


  /**
   * Register_hours create
   */
  export type Register_hoursCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Register_hours
     */
    select?: Register_hoursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Register_hoursInclude<ExtArgs> | null
    /**
     * The data needed to create a Register_hours.
     */
    data: XOR<Register_hoursCreateInput, Register_hoursUncheckedCreateInput>
  }


  /**
   * Register_hours createMany
   */
  export type Register_hoursCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Register_hours.
     */
    data: Register_hoursCreateManyInput | Register_hoursCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Register_hours update
   */
  export type Register_hoursUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Register_hours
     */
    select?: Register_hoursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Register_hoursInclude<ExtArgs> | null
    /**
     * The data needed to update a Register_hours.
     */
    data: XOR<Register_hoursUpdateInput, Register_hoursUncheckedUpdateInput>
    /**
     * Choose, which Register_hours to update.
     */
    where: Register_hoursWhereUniqueInput
  }


  /**
   * Register_hours updateMany
   */
  export type Register_hoursUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Register_hours.
     */
    data: XOR<Register_hoursUpdateManyMutationInput, Register_hoursUncheckedUpdateManyInput>
    /**
     * Filter which Register_hours to update
     */
    where?: Register_hoursWhereInput
  }


  /**
   * Register_hours upsert
   */
  export type Register_hoursUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Register_hours
     */
    select?: Register_hoursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Register_hoursInclude<ExtArgs> | null
    /**
     * The filter to search for the Register_hours to update in case it exists.
     */
    where: Register_hoursWhereUniqueInput
    /**
     * In case the Register_hours found by the `where` argument doesn't exist, create a new Register_hours with this data.
     */
    create: XOR<Register_hoursCreateInput, Register_hoursUncheckedCreateInput>
    /**
     * In case the Register_hours was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Register_hoursUpdateInput, Register_hoursUncheckedUpdateInput>
  }


  /**
   * Register_hours delete
   */
  export type Register_hoursDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Register_hours
     */
    select?: Register_hoursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Register_hoursInclude<ExtArgs> | null
    /**
     * Filter which Register_hours to delete.
     */
    where: Register_hoursWhereUniqueInput
  }


  /**
   * Register_hours deleteMany
   */
  export type Register_hoursDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Register_hours to delete
     */
    where?: Register_hoursWhereInput
  }


  /**
   * Register_hours without action
   */
  export type Register_hoursDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Register_hours
     */
    select?: Register_hoursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Register_hoursInclude<ExtArgs> | null
  }



  /**
   * Model ServiceOrder
   */

  export type AggregateServiceOrder = {
    _count: ServiceOrderCountAggregateOutputType | null
    _min: ServiceOrderMinAggregateOutputType | null
    _max: ServiceOrderMaxAggregateOutputType | null
  }

  export type ServiceOrderMinAggregateOutputType = {
    id_order: string | null
    description: string | null
    created_at: Date | null
    updated_at: Date | null
    delete_at: Date | null
  }

  export type ServiceOrderMaxAggregateOutputType = {
    id_order: string | null
    description: string | null
    created_at: Date | null
    updated_at: Date | null
    delete_at: Date | null
  }

  export type ServiceOrderCountAggregateOutputType = {
    id_order: number
    description: number
    created_at: number
    updated_at: number
    delete_at: number
    _all: number
  }


  export type ServiceOrderMinAggregateInputType = {
    id_order?: true
    description?: true
    created_at?: true
    updated_at?: true
    delete_at?: true
  }

  export type ServiceOrderMaxAggregateInputType = {
    id_order?: true
    description?: true
    created_at?: true
    updated_at?: true
    delete_at?: true
  }

  export type ServiceOrderCountAggregateInputType = {
    id_order?: true
    description?: true
    created_at?: true
    updated_at?: true
    delete_at?: true
    _all?: true
  }

  export type ServiceOrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceOrder to aggregate.
     */
    where?: ServiceOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceOrders to fetch.
     */
    orderBy?: ServiceOrderOrderByWithRelationInput | ServiceOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ServiceOrders
    **/
    _count?: true | ServiceOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceOrderMaxAggregateInputType
  }

  export type GetServiceOrderAggregateType<T extends ServiceOrderAggregateArgs> = {
        [P in keyof T & keyof AggregateServiceOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServiceOrder[P]>
      : GetScalarType<T[P], AggregateServiceOrder[P]>
  }




  export type ServiceOrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceOrderWhereInput
    orderBy?: ServiceOrderOrderByWithAggregationInput | ServiceOrderOrderByWithAggregationInput[]
    by: ServiceOrderScalarFieldEnum[] | ServiceOrderScalarFieldEnum
    having?: ServiceOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceOrderCountAggregateInputType | true
    _min?: ServiceOrderMinAggregateInputType
    _max?: ServiceOrderMaxAggregateInputType
  }

  export type ServiceOrderGroupByOutputType = {
    id_order: string
    description: string
    created_at: Date
    updated_at: Date | null
    delete_at: Date | null
    _count: ServiceOrderCountAggregateOutputType | null
    _min: ServiceOrderMinAggregateOutputType | null
    _max: ServiceOrderMaxAggregateOutputType | null
  }

  type GetServiceOrderGroupByPayload<T extends ServiceOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceOrderGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceOrderGroupByOutputType[P]>
        }
      >
    >


  export type ServiceOrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_order?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
    delete_at?: boolean
    register_hours?: boolean | ServiceOrder$register_hoursArgs<ExtArgs>
    users?: boolean | ServiceOrder$usersArgs<ExtArgs>
    _count?: boolean | ServiceOrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serviceOrder"]>

  export type ServiceOrderSelectScalar = {
    id_order?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
    delete_at?: boolean
  }

  export type ServiceOrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    register_hours?: boolean | ServiceOrder$register_hoursArgs<ExtArgs>
    users?: boolean | ServiceOrder$usersArgs<ExtArgs>
    _count?: boolean | ServiceOrderCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ServiceOrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ServiceOrder"
    objects: {
      register_hours: Prisma.$Register_hoursPayload<ExtArgs>[]
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_order: string
      description: string
      created_at: Date
      updated_at: Date | null
      delete_at: Date | null
    }, ExtArgs["result"]["serviceOrder"]>
    composites: {}
  }


  type ServiceOrderGetPayload<S extends boolean | null | undefined | ServiceOrderDefaultArgs> = $Result.GetResult<Prisma.$ServiceOrderPayload, S>

  type ServiceOrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ServiceOrderFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ServiceOrderCountAggregateInputType | true
    }

  export interface ServiceOrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ServiceOrder'], meta: { name: 'ServiceOrder' } }
    /**
     * Find zero or one ServiceOrder that matches the filter.
     * @param {ServiceOrderFindUniqueArgs} args - Arguments to find a ServiceOrder
     * @example
     * // Get one ServiceOrder
     * const serviceOrder = await prisma.serviceOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ServiceOrderFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceOrderFindUniqueArgs<ExtArgs>>
    ): Prisma__ServiceOrderClient<$Result.GetResult<Prisma.$ServiceOrderPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ServiceOrder that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ServiceOrderFindUniqueOrThrowArgs} args - Arguments to find a ServiceOrder
     * @example
     * // Get one ServiceOrder
     * const serviceOrder = await prisma.serviceOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ServiceOrderFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceOrderFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ServiceOrderClient<$Result.GetResult<Prisma.$ServiceOrderPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ServiceOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceOrderFindFirstArgs} args - Arguments to find a ServiceOrder
     * @example
     * // Get one ServiceOrder
     * const serviceOrder = await prisma.serviceOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ServiceOrderFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceOrderFindFirstArgs<ExtArgs>>
    ): Prisma__ServiceOrderClient<$Result.GetResult<Prisma.$ServiceOrderPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ServiceOrder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceOrderFindFirstOrThrowArgs} args - Arguments to find a ServiceOrder
     * @example
     * // Get one ServiceOrder
     * const serviceOrder = await prisma.serviceOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ServiceOrderFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceOrderFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ServiceOrderClient<$Result.GetResult<Prisma.$ServiceOrderPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ServiceOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceOrderFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ServiceOrders
     * const serviceOrders = await prisma.serviceOrder.findMany()
     * 
     * // Get first 10 ServiceOrders
     * const serviceOrders = await prisma.serviceOrder.findMany({ take: 10 })
     * 
     * // Only select the `id_order`
     * const serviceOrderWithId_orderOnly = await prisma.serviceOrder.findMany({ select: { id_order: true } })
     * 
    **/
    findMany<T extends ServiceOrderFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceOrderFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceOrderPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ServiceOrder.
     * @param {ServiceOrderCreateArgs} args - Arguments to create a ServiceOrder.
     * @example
     * // Create one ServiceOrder
     * const ServiceOrder = await prisma.serviceOrder.create({
     *   data: {
     *     // ... data to create a ServiceOrder
     *   }
     * })
     * 
    **/
    create<T extends ServiceOrderCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceOrderCreateArgs<ExtArgs>>
    ): Prisma__ServiceOrderClient<$Result.GetResult<Prisma.$ServiceOrderPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ServiceOrders.
     *     @param {ServiceOrderCreateManyArgs} args - Arguments to create many ServiceOrders.
     *     @example
     *     // Create many ServiceOrders
     *     const serviceOrder = await prisma.serviceOrder.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ServiceOrderCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceOrderCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ServiceOrder.
     * @param {ServiceOrderDeleteArgs} args - Arguments to delete one ServiceOrder.
     * @example
     * // Delete one ServiceOrder
     * const ServiceOrder = await prisma.serviceOrder.delete({
     *   where: {
     *     // ... filter to delete one ServiceOrder
     *   }
     * })
     * 
    **/
    delete<T extends ServiceOrderDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceOrderDeleteArgs<ExtArgs>>
    ): Prisma__ServiceOrderClient<$Result.GetResult<Prisma.$ServiceOrderPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ServiceOrder.
     * @param {ServiceOrderUpdateArgs} args - Arguments to update one ServiceOrder.
     * @example
     * // Update one ServiceOrder
     * const serviceOrder = await prisma.serviceOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ServiceOrderUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceOrderUpdateArgs<ExtArgs>>
    ): Prisma__ServiceOrderClient<$Result.GetResult<Prisma.$ServiceOrderPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ServiceOrders.
     * @param {ServiceOrderDeleteManyArgs} args - Arguments to filter ServiceOrders to delete.
     * @example
     * // Delete a few ServiceOrders
     * const { count } = await prisma.serviceOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ServiceOrderDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceOrderDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ServiceOrders
     * const serviceOrder = await prisma.serviceOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ServiceOrderUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceOrderUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ServiceOrder.
     * @param {ServiceOrderUpsertArgs} args - Arguments to update or create a ServiceOrder.
     * @example
     * // Update or create a ServiceOrder
     * const serviceOrder = await prisma.serviceOrder.upsert({
     *   create: {
     *     // ... data to create a ServiceOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ServiceOrder we want to update
     *   }
     * })
    **/
    upsert<T extends ServiceOrderUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceOrderUpsertArgs<ExtArgs>>
    ): Prisma__ServiceOrderClient<$Result.GetResult<Prisma.$ServiceOrderPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ServiceOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceOrderCountArgs} args - Arguments to filter ServiceOrders to count.
     * @example
     * // Count the number of ServiceOrders
     * const count = await prisma.serviceOrder.count({
     *   where: {
     *     // ... the filter for the ServiceOrders we want to count
     *   }
     * })
    **/
    count<T extends ServiceOrderCountArgs>(
      args?: Subset<T, ServiceOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ServiceOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceOrderAggregateArgs>(args: Subset<T, ServiceOrderAggregateArgs>): Prisma.PrismaPromise<GetServiceOrderAggregateType<T>>

    /**
     * Group by ServiceOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceOrderGroupByArgs['orderBy'] }
        : { orderBy?: ServiceOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ServiceOrder model
   */
  readonly fields: ServiceOrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ServiceOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServiceOrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    register_hours<T extends ServiceOrder$register_hoursArgs<ExtArgs> = {}>(args?: Subset<T, ServiceOrder$register_hoursArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Register_hoursPayload<ExtArgs>, T, 'findMany'> | Null>;

    users<T extends ServiceOrder$usersArgs<ExtArgs> = {}>(args?: Subset<T, ServiceOrder$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ServiceOrder model
   */ 
  interface ServiceOrderFieldRefs {
    readonly id_order: FieldRef<"ServiceOrder", 'String'>
    readonly description: FieldRef<"ServiceOrder", 'String'>
    readonly created_at: FieldRef<"ServiceOrder", 'DateTime'>
    readonly updated_at: FieldRef<"ServiceOrder", 'DateTime'>
    readonly delete_at: FieldRef<"ServiceOrder", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * ServiceOrder findUnique
   */
  export type ServiceOrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceOrder
     */
    select?: ServiceOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceOrderInclude<ExtArgs> | null
    /**
     * Filter, which ServiceOrder to fetch.
     */
    where: ServiceOrderWhereUniqueInput
  }


  /**
   * ServiceOrder findUniqueOrThrow
   */
  export type ServiceOrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceOrder
     */
    select?: ServiceOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceOrderInclude<ExtArgs> | null
    /**
     * Filter, which ServiceOrder to fetch.
     */
    where: ServiceOrderWhereUniqueInput
  }


  /**
   * ServiceOrder findFirst
   */
  export type ServiceOrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceOrder
     */
    select?: ServiceOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceOrderInclude<ExtArgs> | null
    /**
     * Filter, which ServiceOrder to fetch.
     */
    where?: ServiceOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceOrders to fetch.
     */
    orderBy?: ServiceOrderOrderByWithRelationInput | ServiceOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceOrders.
     */
    cursor?: ServiceOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceOrders.
     */
    distinct?: ServiceOrderScalarFieldEnum | ServiceOrderScalarFieldEnum[]
  }


  /**
   * ServiceOrder findFirstOrThrow
   */
  export type ServiceOrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceOrder
     */
    select?: ServiceOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceOrderInclude<ExtArgs> | null
    /**
     * Filter, which ServiceOrder to fetch.
     */
    where?: ServiceOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceOrders to fetch.
     */
    orderBy?: ServiceOrderOrderByWithRelationInput | ServiceOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceOrders.
     */
    cursor?: ServiceOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceOrders.
     */
    distinct?: ServiceOrderScalarFieldEnum | ServiceOrderScalarFieldEnum[]
  }


  /**
   * ServiceOrder findMany
   */
  export type ServiceOrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceOrder
     */
    select?: ServiceOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceOrderInclude<ExtArgs> | null
    /**
     * Filter, which ServiceOrders to fetch.
     */
    where?: ServiceOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceOrders to fetch.
     */
    orderBy?: ServiceOrderOrderByWithRelationInput | ServiceOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ServiceOrders.
     */
    cursor?: ServiceOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceOrders.
     */
    skip?: number
    distinct?: ServiceOrderScalarFieldEnum | ServiceOrderScalarFieldEnum[]
  }


  /**
   * ServiceOrder create
   */
  export type ServiceOrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceOrder
     */
    select?: ServiceOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceOrderInclude<ExtArgs> | null
    /**
     * The data needed to create a ServiceOrder.
     */
    data: XOR<ServiceOrderCreateInput, ServiceOrderUncheckedCreateInput>
  }


  /**
   * ServiceOrder createMany
   */
  export type ServiceOrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ServiceOrders.
     */
    data: ServiceOrderCreateManyInput | ServiceOrderCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ServiceOrder update
   */
  export type ServiceOrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceOrder
     */
    select?: ServiceOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceOrderInclude<ExtArgs> | null
    /**
     * The data needed to update a ServiceOrder.
     */
    data: XOR<ServiceOrderUpdateInput, ServiceOrderUncheckedUpdateInput>
    /**
     * Choose, which ServiceOrder to update.
     */
    where: ServiceOrderWhereUniqueInput
  }


  /**
   * ServiceOrder updateMany
   */
  export type ServiceOrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ServiceOrders.
     */
    data: XOR<ServiceOrderUpdateManyMutationInput, ServiceOrderUncheckedUpdateManyInput>
    /**
     * Filter which ServiceOrders to update
     */
    where?: ServiceOrderWhereInput
  }


  /**
   * ServiceOrder upsert
   */
  export type ServiceOrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceOrder
     */
    select?: ServiceOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceOrderInclude<ExtArgs> | null
    /**
     * The filter to search for the ServiceOrder to update in case it exists.
     */
    where: ServiceOrderWhereUniqueInput
    /**
     * In case the ServiceOrder found by the `where` argument doesn't exist, create a new ServiceOrder with this data.
     */
    create: XOR<ServiceOrderCreateInput, ServiceOrderUncheckedCreateInput>
    /**
     * In case the ServiceOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceOrderUpdateInput, ServiceOrderUncheckedUpdateInput>
  }


  /**
   * ServiceOrder delete
   */
  export type ServiceOrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceOrder
     */
    select?: ServiceOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceOrderInclude<ExtArgs> | null
    /**
     * Filter which ServiceOrder to delete.
     */
    where: ServiceOrderWhereUniqueInput
  }


  /**
   * ServiceOrder deleteMany
   */
  export type ServiceOrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceOrders to delete
     */
    where?: ServiceOrderWhereInput
  }


  /**
   * ServiceOrder.register_hours
   */
  export type ServiceOrder$register_hoursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Register_hours
     */
    select?: Register_hoursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Register_hoursInclude<ExtArgs> | null
    where?: Register_hoursWhereInput
    orderBy?: Register_hoursOrderByWithRelationInput | Register_hoursOrderByWithRelationInput[]
    cursor?: Register_hoursWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Register_hoursScalarFieldEnum | Register_hoursScalarFieldEnum[]
  }


  /**
   * ServiceOrder.users
   */
  export type ServiceOrder$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * ServiceOrder without action
   */
  export type ServiceOrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceOrder
     */
    select?: ServiceOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceOrderInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    tag: 'tag',
    name: 'name',
    cpf: 'cpf'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const Register_hoursScalarFieldEnum: {
    id_register: 'id_register',
    id_user: 'id_user',
    id_order: 'id_order',
    input: 'input',
    exit: 'exit',
    active: 'active',
    created_at: 'created_at',
    updated_at: 'updated_at',
    delete_at: 'delete_at'
  };

  export type Register_hoursScalarFieldEnum = (typeof Register_hoursScalarFieldEnum)[keyof typeof Register_hoursScalarFieldEnum]


  export const ServiceOrderScalarFieldEnum: {
    id_order: 'id_order',
    description: 'description',
    created_at: 'created_at',
    updated_at: 'updated_at',
    delete_at: 'delete_at'
  };

  export type ServiceOrderScalarFieldEnum = (typeof ServiceOrderScalarFieldEnum)[keyof typeof ServiceOrderScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    tag?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    cpf?: StringFilter<"User"> | string
    register_hours?: Register_hoursListRelationFilter
    service_orders?: ServiceOrderListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    tag?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    register_hours?: Register_hoursOrderByRelationAggregateInput
    service_orders?: ServiceOrderOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    tag?: string
    cpf?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    register_hours?: Register_hoursListRelationFilter
    service_orders?: ServiceOrderListRelationFilter
  }, "id" | "tag" | "cpf">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    tag?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    tag?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    cpf?: StringWithAggregatesFilter<"User"> | string
  }

  export type Register_hoursWhereInput = {
    AND?: Register_hoursWhereInput | Register_hoursWhereInput[]
    OR?: Register_hoursWhereInput[]
    NOT?: Register_hoursWhereInput | Register_hoursWhereInput[]
    id_register?: StringFilter<"Register_hours"> | string
    id_user?: StringFilter<"Register_hours"> | string
    id_order?: StringFilter<"Register_hours"> | string
    input?: DateTimeNullableFilter<"Register_hours"> | Date | string | null
    exit?: DateTimeNullableFilter<"Register_hours"> | Date | string | null
    active?: BoolNullableFilter<"Register_hours"> | boolean | null
    created_at?: DateTimeFilter<"Register_hours"> | Date | string
    updated_at?: DateTimeNullableFilter<"Register_hours"> | Date | string | null
    delete_at?: DateTimeNullableFilter<"Register_hours"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    order?: XOR<ServiceOrderRelationFilter, ServiceOrderWhereInput>
  }

  export type Register_hoursOrderByWithRelationInput = {
    id_register?: SortOrder
    id_user?: SortOrder
    id_order?: SortOrder
    input?: SortOrderInput | SortOrder
    exit?: SortOrderInput | SortOrder
    active?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrderInput | SortOrder
    delete_at?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    order?: ServiceOrderOrderByWithRelationInput
  }

  export type Register_hoursWhereUniqueInput = Prisma.AtLeast<{
    id_register?: string
    AND?: Register_hoursWhereInput | Register_hoursWhereInput[]
    OR?: Register_hoursWhereInput[]
    NOT?: Register_hoursWhereInput | Register_hoursWhereInput[]
    id_user?: StringFilter<"Register_hours"> | string
    id_order?: StringFilter<"Register_hours"> | string
    input?: DateTimeNullableFilter<"Register_hours"> | Date | string | null
    exit?: DateTimeNullableFilter<"Register_hours"> | Date | string | null
    active?: BoolNullableFilter<"Register_hours"> | boolean | null
    created_at?: DateTimeFilter<"Register_hours"> | Date | string
    updated_at?: DateTimeNullableFilter<"Register_hours"> | Date | string | null
    delete_at?: DateTimeNullableFilter<"Register_hours"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    order?: XOR<ServiceOrderRelationFilter, ServiceOrderWhereInput>
  }, "id_register">

  export type Register_hoursOrderByWithAggregationInput = {
    id_register?: SortOrder
    id_user?: SortOrder
    id_order?: SortOrder
    input?: SortOrderInput | SortOrder
    exit?: SortOrderInput | SortOrder
    active?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrderInput | SortOrder
    delete_at?: SortOrderInput | SortOrder
    _count?: Register_hoursCountOrderByAggregateInput
    _max?: Register_hoursMaxOrderByAggregateInput
    _min?: Register_hoursMinOrderByAggregateInput
  }

  export type Register_hoursScalarWhereWithAggregatesInput = {
    AND?: Register_hoursScalarWhereWithAggregatesInput | Register_hoursScalarWhereWithAggregatesInput[]
    OR?: Register_hoursScalarWhereWithAggregatesInput[]
    NOT?: Register_hoursScalarWhereWithAggregatesInput | Register_hoursScalarWhereWithAggregatesInput[]
    id_register?: StringWithAggregatesFilter<"Register_hours"> | string
    id_user?: StringWithAggregatesFilter<"Register_hours"> | string
    id_order?: StringWithAggregatesFilter<"Register_hours"> | string
    input?: DateTimeNullableWithAggregatesFilter<"Register_hours"> | Date | string | null
    exit?: DateTimeNullableWithAggregatesFilter<"Register_hours"> | Date | string | null
    active?: BoolNullableWithAggregatesFilter<"Register_hours"> | boolean | null
    created_at?: DateTimeWithAggregatesFilter<"Register_hours"> | Date | string
    updated_at?: DateTimeNullableWithAggregatesFilter<"Register_hours"> | Date | string | null
    delete_at?: DateTimeNullableWithAggregatesFilter<"Register_hours"> | Date | string | null
  }

  export type ServiceOrderWhereInput = {
    AND?: ServiceOrderWhereInput | ServiceOrderWhereInput[]
    OR?: ServiceOrderWhereInput[]
    NOT?: ServiceOrderWhereInput | ServiceOrderWhereInput[]
    id_order?: StringFilter<"ServiceOrder"> | string
    description?: StringFilter<"ServiceOrder"> | string
    created_at?: DateTimeFilter<"ServiceOrder"> | Date | string
    updated_at?: DateTimeNullableFilter<"ServiceOrder"> | Date | string | null
    delete_at?: DateTimeNullableFilter<"ServiceOrder"> | Date | string | null
    register_hours?: Register_hoursListRelationFilter
    users?: UserListRelationFilter
  }

  export type ServiceOrderOrderByWithRelationInput = {
    id_order?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrderInput | SortOrder
    delete_at?: SortOrderInput | SortOrder
    register_hours?: Register_hoursOrderByRelationAggregateInput
    users?: UserOrderByRelationAggregateInput
  }

  export type ServiceOrderWhereUniqueInput = Prisma.AtLeast<{
    id_order?: string
    AND?: ServiceOrderWhereInput | ServiceOrderWhereInput[]
    OR?: ServiceOrderWhereInput[]
    NOT?: ServiceOrderWhereInput | ServiceOrderWhereInput[]
    description?: StringFilter<"ServiceOrder"> | string
    created_at?: DateTimeFilter<"ServiceOrder"> | Date | string
    updated_at?: DateTimeNullableFilter<"ServiceOrder"> | Date | string | null
    delete_at?: DateTimeNullableFilter<"ServiceOrder"> | Date | string | null
    register_hours?: Register_hoursListRelationFilter
    users?: UserListRelationFilter
  }, "id_order">

  export type ServiceOrderOrderByWithAggregationInput = {
    id_order?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrderInput | SortOrder
    delete_at?: SortOrderInput | SortOrder
    _count?: ServiceOrderCountOrderByAggregateInput
    _max?: ServiceOrderMaxOrderByAggregateInput
    _min?: ServiceOrderMinOrderByAggregateInput
  }

  export type ServiceOrderScalarWhereWithAggregatesInput = {
    AND?: ServiceOrderScalarWhereWithAggregatesInput | ServiceOrderScalarWhereWithAggregatesInput[]
    OR?: ServiceOrderScalarWhereWithAggregatesInput[]
    NOT?: ServiceOrderScalarWhereWithAggregatesInput | ServiceOrderScalarWhereWithAggregatesInput[]
    id_order?: StringWithAggregatesFilter<"ServiceOrder"> | string
    description?: StringWithAggregatesFilter<"ServiceOrder"> | string
    created_at?: DateTimeWithAggregatesFilter<"ServiceOrder"> | Date | string
    updated_at?: DateTimeNullableWithAggregatesFilter<"ServiceOrder"> | Date | string | null
    delete_at?: DateTimeNullableWithAggregatesFilter<"ServiceOrder"> | Date | string | null
  }

  export type UserCreateInput = {
    id?: string
    tag: string
    name: string
    cpf: string
    register_hours?: Register_hoursCreateNestedManyWithoutUserInput
    service_orders?: ServiceOrderCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    tag: string
    name: string
    cpf: string
    register_hours?: Register_hoursUncheckedCreateNestedManyWithoutUserInput
    service_orders?: ServiceOrderUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    register_hours?: Register_hoursUpdateManyWithoutUserNestedInput
    service_orders?: ServiceOrderUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    register_hours?: Register_hoursUncheckedUpdateManyWithoutUserNestedInput
    service_orders?: ServiceOrderUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    tag: string
    name: string
    cpf: string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
  }

  export type Register_hoursCreateInput = {
    id_register?: string
    input?: Date | string | null
    exit?: Date | string | null
    active?: boolean | null
    created_at?: Date | string
    updated_at?: Date | string | null
    delete_at?: Date | string | null
    user: UserCreateNestedOneWithoutRegister_hoursInput
    order: ServiceOrderCreateNestedOneWithoutRegister_hoursInput
  }

  export type Register_hoursUncheckedCreateInput = {
    id_register?: string
    id_user: string
    id_order: string
    input?: Date | string | null
    exit?: Date | string | null
    active?: boolean | null
    created_at?: Date | string
    updated_at?: Date | string | null
    delete_at?: Date | string | null
  }

  export type Register_hoursUpdateInput = {
    id_register?: StringFieldUpdateOperationsInput | string
    input?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutRegister_hoursNestedInput
    order?: ServiceOrderUpdateOneRequiredWithoutRegister_hoursNestedInput
  }

  export type Register_hoursUncheckedUpdateInput = {
    id_register?: StringFieldUpdateOperationsInput | string
    id_user?: StringFieldUpdateOperationsInput | string
    id_order?: StringFieldUpdateOperationsInput | string
    input?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Register_hoursCreateManyInput = {
    id_register?: string
    id_user: string
    id_order: string
    input?: Date | string | null
    exit?: Date | string | null
    active?: boolean | null
    created_at?: Date | string
    updated_at?: Date | string | null
    delete_at?: Date | string | null
  }

  export type Register_hoursUpdateManyMutationInput = {
    id_register?: StringFieldUpdateOperationsInput | string
    input?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Register_hoursUncheckedUpdateManyInput = {
    id_register?: StringFieldUpdateOperationsInput | string
    id_user?: StringFieldUpdateOperationsInput | string
    id_order?: StringFieldUpdateOperationsInput | string
    input?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ServiceOrderCreateInput = {
    id_order?: string
    description: string
    created_at?: Date | string
    updated_at?: Date | string | null
    delete_at?: Date | string | null
    register_hours?: Register_hoursCreateNestedManyWithoutOrderInput
    users?: UserCreateNestedManyWithoutService_ordersInput
  }

  export type ServiceOrderUncheckedCreateInput = {
    id_order?: string
    description: string
    created_at?: Date | string
    updated_at?: Date | string | null
    delete_at?: Date | string | null
    register_hours?: Register_hoursUncheckedCreateNestedManyWithoutOrderInput
    users?: UserUncheckedCreateNestedManyWithoutService_ordersInput
  }

  export type ServiceOrderUpdateInput = {
    id_order?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    register_hours?: Register_hoursUpdateManyWithoutOrderNestedInput
    users?: UserUpdateManyWithoutService_ordersNestedInput
  }

  export type ServiceOrderUncheckedUpdateInput = {
    id_order?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    register_hours?: Register_hoursUncheckedUpdateManyWithoutOrderNestedInput
    users?: UserUncheckedUpdateManyWithoutService_ordersNestedInput
  }

  export type ServiceOrderCreateManyInput = {
    id_order?: string
    description: string
    created_at?: Date | string
    updated_at?: Date | string | null
    delete_at?: Date | string | null
  }

  export type ServiceOrderUpdateManyMutationInput = {
    id_order?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ServiceOrderUncheckedUpdateManyInput = {
    id_order?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type Register_hoursListRelationFilter = {
    every?: Register_hoursWhereInput
    some?: Register_hoursWhereInput
    none?: Register_hoursWhereInput
  }

  export type ServiceOrderListRelationFilter = {
    every?: ServiceOrderWhereInput
    some?: ServiceOrderWhereInput
    none?: ServiceOrderWhereInput
  }

  export type Register_hoursOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ServiceOrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    tag?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    tag?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    tag?: SortOrder
    name?: SortOrder
    cpf?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ServiceOrderRelationFilter = {
    is?: ServiceOrderWhereInput
    isNot?: ServiceOrderWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type Register_hoursCountOrderByAggregateInput = {
    id_register?: SortOrder
    id_user?: SortOrder
    id_order?: SortOrder
    input?: SortOrder
    exit?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    delete_at?: SortOrder
  }

  export type Register_hoursMaxOrderByAggregateInput = {
    id_register?: SortOrder
    id_user?: SortOrder
    id_order?: SortOrder
    input?: SortOrder
    exit?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    delete_at?: SortOrder
  }

  export type Register_hoursMinOrderByAggregateInput = {
    id_register?: SortOrder
    id_user?: SortOrder
    id_order?: SortOrder
    input?: SortOrder
    exit?: SortOrder
    active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    delete_at?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ServiceOrderCountOrderByAggregateInput = {
    id_order?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    delete_at?: SortOrder
  }

  export type ServiceOrderMaxOrderByAggregateInput = {
    id_order?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    delete_at?: SortOrder
  }

  export type ServiceOrderMinOrderByAggregateInput = {
    id_order?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    delete_at?: SortOrder
  }

  export type Register_hoursCreateNestedManyWithoutUserInput = {
    create?: XOR<Register_hoursCreateWithoutUserInput, Register_hoursUncheckedCreateWithoutUserInput> | Register_hoursCreateWithoutUserInput[] | Register_hoursUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Register_hoursCreateOrConnectWithoutUserInput | Register_hoursCreateOrConnectWithoutUserInput[]
    createMany?: Register_hoursCreateManyUserInputEnvelope
    connect?: Register_hoursWhereUniqueInput | Register_hoursWhereUniqueInput[]
  }

  export type ServiceOrderCreateNestedManyWithoutUsersInput = {
    create?: XOR<ServiceOrderCreateWithoutUsersInput, ServiceOrderUncheckedCreateWithoutUsersInput> | ServiceOrderCreateWithoutUsersInput[] | ServiceOrderUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ServiceOrderCreateOrConnectWithoutUsersInput | ServiceOrderCreateOrConnectWithoutUsersInput[]
    connect?: ServiceOrderWhereUniqueInput | ServiceOrderWhereUniqueInput[]
  }

  export type Register_hoursUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Register_hoursCreateWithoutUserInput, Register_hoursUncheckedCreateWithoutUserInput> | Register_hoursCreateWithoutUserInput[] | Register_hoursUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Register_hoursCreateOrConnectWithoutUserInput | Register_hoursCreateOrConnectWithoutUserInput[]
    createMany?: Register_hoursCreateManyUserInputEnvelope
    connect?: Register_hoursWhereUniqueInput | Register_hoursWhereUniqueInput[]
  }

  export type ServiceOrderUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<ServiceOrderCreateWithoutUsersInput, ServiceOrderUncheckedCreateWithoutUsersInput> | ServiceOrderCreateWithoutUsersInput[] | ServiceOrderUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ServiceOrderCreateOrConnectWithoutUsersInput | ServiceOrderCreateOrConnectWithoutUsersInput[]
    connect?: ServiceOrderWhereUniqueInput | ServiceOrderWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type Register_hoursUpdateManyWithoutUserNestedInput = {
    create?: XOR<Register_hoursCreateWithoutUserInput, Register_hoursUncheckedCreateWithoutUserInput> | Register_hoursCreateWithoutUserInput[] | Register_hoursUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Register_hoursCreateOrConnectWithoutUserInput | Register_hoursCreateOrConnectWithoutUserInput[]
    upsert?: Register_hoursUpsertWithWhereUniqueWithoutUserInput | Register_hoursUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: Register_hoursCreateManyUserInputEnvelope
    set?: Register_hoursWhereUniqueInput | Register_hoursWhereUniqueInput[]
    disconnect?: Register_hoursWhereUniqueInput | Register_hoursWhereUniqueInput[]
    delete?: Register_hoursWhereUniqueInput | Register_hoursWhereUniqueInput[]
    connect?: Register_hoursWhereUniqueInput | Register_hoursWhereUniqueInput[]
    update?: Register_hoursUpdateWithWhereUniqueWithoutUserInput | Register_hoursUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: Register_hoursUpdateManyWithWhereWithoutUserInput | Register_hoursUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: Register_hoursScalarWhereInput | Register_hoursScalarWhereInput[]
  }

  export type ServiceOrderUpdateManyWithoutUsersNestedInput = {
    create?: XOR<ServiceOrderCreateWithoutUsersInput, ServiceOrderUncheckedCreateWithoutUsersInput> | ServiceOrderCreateWithoutUsersInput[] | ServiceOrderUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ServiceOrderCreateOrConnectWithoutUsersInput | ServiceOrderCreateOrConnectWithoutUsersInput[]
    upsert?: ServiceOrderUpsertWithWhereUniqueWithoutUsersInput | ServiceOrderUpsertWithWhereUniqueWithoutUsersInput[]
    set?: ServiceOrderWhereUniqueInput | ServiceOrderWhereUniqueInput[]
    disconnect?: ServiceOrderWhereUniqueInput | ServiceOrderWhereUniqueInput[]
    delete?: ServiceOrderWhereUniqueInput | ServiceOrderWhereUniqueInput[]
    connect?: ServiceOrderWhereUniqueInput | ServiceOrderWhereUniqueInput[]
    update?: ServiceOrderUpdateWithWhereUniqueWithoutUsersInput | ServiceOrderUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: ServiceOrderUpdateManyWithWhereWithoutUsersInput | ServiceOrderUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: ServiceOrderScalarWhereInput | ServiceOrderScalarWhereInput[]
  }

  export type Register_hoursUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Register_hoursCreateWithoutUserInput, Register_hoursUncheckedCreateWithoutUserInput> | Register_hoursCreateWithoutUserInput[] | Register_hoursUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Register_hoursCreateOrConnectWithoutUserInput | Register_hoursCreateOrConnectWithoutUserInput[]
    upsert?: Register_hoursUpsertWithWhereUniqueWithoutUserInput | Register_hoursUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: Register_hoursCreateManyUserInputEnvelope
    set?: Register_hoursWhereUniqueInput | Register_hoursWhereUniqueInput[]
    disconnect?: Register_hoursWhereUniqueInput | Register_hoursWhereUniqueInput[]
    delete?: Register_hoursWhereUniqueInput | Register_hoursWhereUniqueInput[]
    connect?: Register_hoursWhereUniqueInput | Register_hoursWhereUniqueInput[]
    update?: Register_hoursUpdateWithWhereUniqueWithoutUserInput | Register_hoursUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: Register_hoursUpdateManyWithWhereWithoutUserInput | Register_hoursUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: Register_hoursScalarWhereInput | Register_hoursScalarWhereInput[]
  }

  export type ServiceOrderUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<ServiceOrderCreateWithoutUsersInput, ServiceOrderUncheckedCreateWithoutUsersInput> | ServiceOrderCreateWithoutUsersInput[] | ServiceOrderUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ServiceOrderCreateOrConnectWithoutUsersInput | ServiceOrderCreateOrConnectWithoutUsersInput[]
    upsert?: ServiceOrderUpsertWithWhereUniqueWithoutUsersInput | ServiceOrderUpsertWithWhereUniqueWithoutUsersInput[]
    set?: ServiceOrderWhereUniqueInput | ServiceOrderWhereUniqueInput[]
    disconnect?: ServiceOrderWhereUniqueInput | ServiceOrderWhereUniqueInput[]
    delete?: ServiceOrderWhereUniqueInput | ServiceOrderWhereUniqueInput[]
    connect?: ServiceOrderWhereUniqueInput | ServiceOrderWhereUniqueInput[]
    update?: ServiceOrderUpdateWithWhereUniqueWithoutUsersInput | ServiceOrderUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: ServiceOrderUpdateManyWithWhereWithoutUsersInput | ServiceOrderUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: ServiceOrderScalarWhereInput | ServiceOrderScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutRegister_hoursInput = {
    create?: XOR<UserCreateWithoutRegister_hoursInput, UserUncheckedCreateWithoutRegister_hoursInput>
    connectOrCreate?: UserCreateOrConnectWithoutRegister_hoursInput
    connect?: UserWhereUniqueInput
  }

  export type ServiceOrderCreateNestedOneWithoutRegister_hoursInput = {
    create?: XOR<ServiceOrderCreateWithoutRegister_hoursInput, ServiceOrderUncheckedCreateWithoutRegister_hoursInput>
    connectOrCreate?: ServiceOrderCreateOrConnectWithoutRegister_hoursInput
    connect?: ServiceOrderWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutRegister_hoursNestedInput = {
    create?: XOR<UserCreateWithoutRegister_hoursInput, UserUncheckedCreateWithoutRegister_hoursInput>
    connectOrCreate?: UserCreateOrConnectWithoutRegister_hoursInput
    upsert?: UserUpsertWithoutRegister_hoursInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRegister_hoursInput, UserUpdateWithoutRegister_hoursInput>, UserUncheckedUpdateWithoutRegister_hoursInput>
  }

  export type ServiceOrderUpdateOneRequiredWithoutRegister_hoursNestedInput = {
    create?: XOR<ServiceOrderCreateWithoutRegister_hoursInput, ServiceOrderUncheckedCreateWithoutRegister_hoursInput>
    connectOrCreate?: ServiceOrderCreateOrConnectWithoutRegister_hoursInput
    upsert?: ServiceOrderUpsertWithoutRegister_hoursInput
    connect?: ServiceOrderWhereUniqueInput
    update?: XOR<XOR<ServiceOrderUpdateToOneWithWhereWithoutRegister_hoursInput, ServiceOrderUpdateWithoutRegister_hoursInput>, ServiceOrderUncheckedUpdateWithoutRegister_hoursInput>
  }

  export type Register_hoursCreateNestedManyWithoutOrderInput = {
    create?: XOR<Register_hoursCreateWithoutOrderInput, Register_hoursUncheckedCreateWithoutOrderInput> | Register_hoursCreateWithoutOrderInput[] | Register_hoursUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: Register_hoursCreateOrConnectWithoutOrderInput | Register_hoursCreateOrConnectWithoutOrderInput[]
    createMany?: Register_hoursCreateManyOrderInputEnvelope
    connect?: Register_hoursWhereUniqueInput | Register_hoursWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutService_ordersInput = {
    create?: XOR<UserCreateWithoutService_ordersInput, UserUncheckedCreateWithoutService_ordersInput> | UserCreateWithoutService_ordersInput[] | UserUncheckedCreateWithoutService_ordersInput[]
    connectOrCreate?: UserCreateOrConnectWithoutService_ordersInput | UserCreateOrConnectWithoutService_ordersInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type Register_hoursUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<Register_hoursCreateWithoutOrderInput, Register_hoursUncheckedCreateWithoutOrderInput> | Register_hoursCreateWithoutOrderInput[] | Register_hoursUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: Register_hoursCreateOrConnectWithoutOrderInput | Register_hoursCreateOrConnectWithoutOrderInput[]
    createMany?: Register_hoursCreateManyOrderInputEnvelope
    connect?: Register_hoursWhereUniqueInput | Register_hoursWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutService_ordersInput = {
    create?: XOR<UserCreateWithoutService_ordersInput, UserUncheckedCreateWithoutService_ordersInput> | UserCreateWithoutService_ordersInput[] | UserUncheckedCreateWithoutService_ordersInput[]
    connectOrCreate?: UserCreateOrConnectWithoutService_ordersInput | UserCreateOrConnectWithoutService_ordersInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type Register_hoursUpdateManyWithoutOrderNestedInput = {
    create?: XOR<Register_hoursCreateWithoutOrderInput, Register_hoursUncheckedCreateWithoutOrderInput> | Register_hoursCreateWithoutOrderInput[] | Register_hoursUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: Register_hoursCreateOrConnectWithoutOrderInput | Register_hoursCreateOrConnectWithoutOrderInput[]
    upsert?: Register_hoursUpsertWithWhereUniqueWithoutOrderInput | Register_hoursUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: Register_hoursCreateManyOrderInputEnvelope
    set?: Register_hoursWhereUniqueInput | Register_hoursWhereUniqueInput[]
    disconnect?: Register_hoursWhereUniqueInput | Register_hoursWhereUniqueInput[]
    delete?: Register_hoursWhereUniqueInput | Register_hoursWhereUniqueInput[]
    connect?: Register_hoursWhereUniqueInput | Register_hoursWhereUniqueInput[]
    update?: Register_hoursUpdateWithWhereUniqueWithoutOrderInput | Register_hoursUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: Register_hoursUpdateManyWithWhereWithoutOrderInput | Register_hoursUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: Register_hoursScalarWhereInput | Register_hoursScalarWhereInput[]
  }

  export type UserUpdateManyWithoutService_ordersNestedInput = {
    create?: XOR<UserCreateWithoutService_ordersInput, UserUncheckedCreateWithoutService_ordersInput> | UserCreateWithoutService_ordersInput[] | UserUncheckedCreateWithoutService_ordersInput[]
    connectOrCreate?: UserCreateOrConnectWithoutService_ordersInput | UserCreateOrConnectWithoutService_ordersInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutService_ordersInput | UserUpsertWithWhereUniqueWithoutService_ordersInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutService_ordersInput | UserUpdateWithWhereUniqueWithoutService_ordersInput[]
    updateMany?: UserUpdateManyWithWhereWithoutService_ordersInput | UserUpdateManyWithWhereWithoutService_ordersInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type Register_hoursUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<Register_hoursCreateWithoutOrderInput, Register_hoursUncheckedCreateWithoutOrderInput> | Register_hoursCreateWithoutOrderInput[] | Register_hoursUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: Register_hoursCreateOrConnectWithoutOrderInput | Register_hoursCreateOrConnectWithoutOrderInput[]
    upsert?: Register_hoursUpsertWithWhereUniqueWithoutOrderInput | Register_hoursUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: Register_hoursCreateManyOrderInputEnvelope
    set?: Register_hoursWhereUniqueInput | Register_hoursWhereUniqueInput[]
    disconnect?: Register_hoursWhereUniqueInput | Register_hoursWhereUniqueInput[]
    delete?: Register_hoursWhereUniqueInput | Register_hoursWhereUniqueInput[]
    connect?: Register_hoursWhereUniqueInput | Register_hoursWhereUniqueInput[]
    update?: Register_hoursUpdateWithWhereUniqueWithoutOrderInput | Register_hoursUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: Register_hoursUpdateManyWithWhereWithoutOrderInput | Register_hoursUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: Register_hoursScalarWhereInput | Register_hoursScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutService_ordersNestedInput = {
    create?: XOR<UserCreateWithoutService_ordersInput, UserUncheckedCreateWithoutService_ordersInput> | UserCreateWithoutService_ordersInput[] | UserUncheckedCreateWithoutService_ordersInput[]
    connectOrCreate?: UserCreateOrConnectWithoutService_ordersInput | UserCreateOrConnectWithoutService_ordersInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutService_ordersInput | UserUpsertWithWhereUniqueWithoutService_ordersInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutService_ordersInput | UserUpdateWithWhereUniqueWithoutService_ordersInput[]
    updateMany?: UserUpdateManyWithWhereWithoutService_ordersInput | UserUpdateManyWithWhereWithoutService_ordersInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type Register_hoursCreateWithoutUserInput = {
    id_register?: string
    input?: Date | string | null
    exit?: Date | string | null
    active?: boolean | null
    created_at?: Date | string
    updated_at?: Date | string | null
    delete_at?: Date | string | null
    order: ServiceOrderCreateNestedOneWithoutRegister_hoursInput
  }

  export type Register_hoursUncheckedCreateWithoutUserInput = {
    id_register?: string
    id_order: string
    input?: Date | string | null
    exit?: Date | string | null
    active?: boolean | null
    created_at?: Date | string
    updated_at?: Date | string | null
    delete_at?: Date | string | null
  }

  export type Register_hoursCreateOrConnectWithoutUserInput = {
    where: Register_hoursWhereUniqueInput
    create: XOR<Register_hoursCreateWithoutUserInput, Register_hoursUncheckedCreateWithoutUserInput>
  }

  export type Register_hoursCreateManyUserInputEnvelope = {
    data: Register_hoursCreateManyUserInput | Register_hoursCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ServiceOrderCreateWithoutUsersInput = {
    id_order?: string
    description: string
    created_at?: Date | string
    updated_at?: Date | string | null
    delete_at?: Date | string | null
    register_hours?: Register_hoursCreateNestedManyWithoutOrderInput
  }

  export type ServiceOrderUncheckedCreateWithoutUsersInput = {
    id_order?: string
    description: string
    created_at?: Date | string
    updated_at?: Date | string | null
    delete_at?: Date | string | null
    register_hours?: Register_hoursUncheckedCreateNestedManyWithoutOrderInput
  }

  export type ServiceOrderCreateOrConnectWithoutUsersInput = {
    where: ServiceOrderWhereUniqueInput
    create: XOR<ServiceOrderCreateWithoutUsersInput, ServiceOrderUncheckedCreateWithoutUsersInput>
  }

  export type Register_hoursUpsertWithWhereUniqueWithoutUserInput = {
    where: Register_hoursWhereUniqueInput
    update: XOR<Register_hoursUpdateWithoutUserInput, Register_hoursUncheckedUpdateWithoutUserInput>
    create: XOR<Register_hoursCreateWithoutUserInput, Register_hoursUncheckedCreateWithoutUserInput>
  }

  export type Register_hoursUpdateWithWhereUniqueWithoutUserInput = {
    where: Register_hoursWhereUniqueInput
    data: XOR<Register_hoursUpdateWithoutUserInput, Register_hoursUncheckedUpdateWithoutUserInput>
  }

  export type Register_hoursUpdateManyWithWhereWithoutUserInput = {
    where: Register_hoursScalarWhereInput
    data: XOR<Register_hoursUpdateManyMutationInput, Register_hoursUncheckedUpdateManyWithoutUserInput>
  }

  export type Register_hoursScalarWhereInput = {
    AND?: Register_hoursScalarWhereInput | Register_hoursScalarWhereInput[]
    OR?: Register_hoursScalarWhereInput[]
    NOT?: Register_hoursScalarWhereInput | Register_hoursScalarWhereInput[]
    id_register?: StringFilter<"Register_hours"> | string
    id_user?: StringFilter<"Register_hours"> | string
    id_order?: StringFilter<"Register_hours"> | string
    input?: DateTimeNullableFilter<"Register_hours"> | Date | string | null
    exit?: DateTimeNullableFilter<"Register_hours"> | Date | string | null
    active?: BoolNullableFilter<"Register_hours"> | boolean | null
    created_at?: DateTimeFilter<"Register_hours"> | Date | string
    updated_at?: DateTimeNullableFilter<"Register_hours"> | Date | string | null
    delete_at?: DateTimeNullableFilter<"Register_hours"> | Date | string | null
  }

  export type ServiceOrderUpsertWithWhereUniqueWithoutUsersInput = {
    where: ServiceOrderWhereUniqueInput
    update: XOR<ServiceOrderUpdateWithoutUsersInput, ServiceOrderUncheckedUpdateWithoutUsersInput>
    create: XOR<ServiceOrderCreateWithoutUsersInput, ServiceOrderUncheckedCreateWithoutUsersInput>
  }

  export type ServiceOrderUpdateWithWhereUniqueWithoutUsersInput = {
    where: ServiceOrderWhereUniqueInput
    data: XOR<ServiceOrderUpdateWithoutUsersInput, ServiceOrderUncheckedUpdateWithoutUsersInput>
  }

  export type ServiceOrderUpdateManyWithWhereWithoutUsersInput = {
    where: ServiceOrderScalarWhereInput
    data: XOR<ServiceOrderUpdateManyMutationInput, ServiceOrderUncheckedUpdateManyWithoutUsersInput>
  }

  export type ServiceOrderScalarWhereInput = {
    AND?: ServiceOrderScalarWhereInput | ServiceOrderScalarWhereInput[]
    OR?: ServiceOrderScalarWhereInput[]
    NOT?: ServiceOrderScalarWhereInput | ServiceOrderScalarWhereInput[]
    id_order?: StringFilter<"ServiceOrder"> | string
    description?: StringFilter<"ServiceOrder"> | string
    created_at?: DateTimeFilter<"ServiceOrder"> | Date | string
    updated_at?: DateTimeNullableFilter<"ServiceOrder"> | Date | string | null
    delete_at?: DateTimeNullableFilter<"ServiceOrder"> | Date | string | null
  }

  export type UserCreateWithoutRegister_hoursInput = {
    id?: string
    tag: string
    name: string
    cpf: string
    service_orders?: ServiceOrderCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutRegister_hoursInput = {
    id?: string
    tag: string
    name: string
    cpf: string
    service_orders?: ServiceOrderUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutRegister_hoursInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRegister_hoursInput, UserUncheckedCreateWithoutRegister_hoursInput>
  }

  export type ServiceOrderCreateWithoutRegister_hoursInput = {
    id_order?: string
    description: string
    created_at?: Date | string
    updated_at?: Date | string | null
    delete_at?: Date | string | null
    users?: UserCreateNestedManyWithoutService_ordersInput
  }

  export type ServiceOrderUncheckedCreateWithoutRegister_hoursInput = {
    id_order?: string
    description: string
    created_at?: Date | string
    updated_at?: Date | string | null
    delete_at?: Date | string | null
    users?: UserUncheckedCreateNestedManyWithoutService_ordersInput
  }

  export type ServiceOrderCreateOrConnectWithoutRegister_hoursInput = {
    where: ServiceOrderWhereUniqueInput
    create: XOR<ServiceOrderCreateWithoutRegister_hoursInput, ServiceOrderUncheckedCreateWithoutRegister_hoursInput>
  }

  export type UserUpsertWithoutRegister_hoursInput = {
    update: XOR<UserUpdateWithoutRegister_hoursInput, UserUncheckedUpdateWithoutRegister_hoursInput>
    create: XOR<UserCreateWithoutRegister_hoursInput, UserUncheckedCreateWithoutRegister_hoursInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRegister_hoursInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRegister_hoursInput, UserUncheckedUpdateWithoutRegister_hoursInput>
  }

  export type UserUpdateWithoutRegister_hoursInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    service_orders?: ServiceOrderUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutRegister_hoursInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    service_orders?: ServiceOrderUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type ServiceOrderUpsertWithoutRegister_hoursInput = {
    update: XOR<ServiceOrderUpdateWithoutRegister_hoursInput, ServiceOrderUncheckedUpdateWithoutRegister_hoursInput>
    create: XOR<ServiceOrderCreateWithoutRegister_hoursInput, ServiceOrderUncheckedCreateWithoutRegister_hoursInput>
    where?: ServiceOrderWhereInput
  }

  export type ServiceOrderUpdateToOneWithWhereWithoutRegister_hoursInput = {
    where?: ServiceOrderWhereInput
    data: XOR<ServiceOrderUpdateWithoutRegister_hoursInput, ServiceOrderUncheckedUpdateWithoutRegister_hoursInput>
  }

  export type ServiceOrderUpdateWithoutRegister_hoursInput = {
    id_order?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUpdateManyWithoutService_ordersNestedInput
  }

  export type ServiceOrderUncheckedUpdateWithoutRegister_hoursInput = {
    id_order?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserUncheckedUpdateManyWithoutService_ordersNestedInput
  }

  export type Register_hoursCreateWithoutOrderInput = {
    id_register?: string
    input?: Date | string | null
    exit?: Date | string | null
    active?: boolean | null
    created_at?: Date | string
    updated_at?: Date | string | null
    delete_at?: Date | string | null
    user: UserCreateNestedOneWithoutRegister_hoursInput
  }

  export type Register_hoursUncheckedCreateWithoutOrderInput = {
    id_register?: string
    id_user: string
    input?: Date | string | null
    exit?: Date | string | null
    active?: boolean | null
    created_at?: Date | string
    updated_at?: Date | string | null
    delete_at?: Date | string | null
  }

  export type Register_hoursCreateOrConnectWithoutOrderInput = {
    where: Register_hoursWhereUniqueInput
    create: XOR<Register_hoursCreateWithoutOrderInput, Register_hoursUncheckedCreateWithoutOrderInput>
  }

  export type Register_hoursCreateManyOrderInputEnvelope = {
    data: Register_hoursCreateManyOrderInput | Register_hoursCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutService_ordersInput = {
    id?: string
    tag: string
    name: string
    cpf: string
    register_hours?: Register_hoursCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutService_ordersInput = {
    id?: string
    tag: string
    name: string
    cpf: string
    register_hours?: Register_hoursUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutService_ordersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutService_ordersInput, UserUncheckedCreateWithoutService_ordersInput>
  }

  export type Register_hoursUpsertWithWhereUniqueWithoutOrderInput = {
    where: Register_hoursWhereUniqueInput
    update: XOR<Register_hoursUpdateWithoutOrderInput, Register_hoursUncheckedUpdateWithoutOrderInput>
    create: XOR<Register_hoursCreateWithoutOrderInput, Register_hoursUncheckedCreateWithoutOrderInput>
  }

  export type Register_hoursUpdateWithWhereUniqueWithoutOrderInput = {
    where: Register_hoursWhereUniqueInput
    data: XOR<Register_hoursUpdateWithoutOrderInput, Register_hoursUncheckedUpdateWithoutOrderInput>
  }

  export type Register_hoursUpdateManyWithWhereWithoutOrderInput = {
    where: Register_hoursScalarWhereInput
    data: XOR<Register_hoursUpdateManyMutationInput, Register_hoursUncheckedUpdateManyWithoutOrderInput>
  }

  export type UserUpsertWithWhereUniqueWithoutService_ordersInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutService_ordersInput, UserUncheckedUpdateWithoutService_ordersInput>
    create: XOR<UserCreateWithoutService_ordersInput, UserUncheckedCreateWithoutService_ordersInput>
  }

  export type UserUpdateWithWhereUniqueWithoutService_ordersInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutService_ordersInput, UserUncheckedUpdateWithoutService_ordersInput>
  }

  export type UserUpdateManyWithWhereWithoutService_ordersInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutService_ordersInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    tag?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    cpf?: StringFilter<"User"> | string
  }

  export type Register_hoursCreateManyUserInput = {
    id_register?: string
    id_order: string
    input?: Date | string | null
    exit?: Date | string | null
    active?: boolean | null
    created_at?: Date | string
    updated_at?: Date | string | null
    delete_at?: Date | string | null
  }

  export type Register_hoursUpdateWithoutUserInput = {
    id_register?: StringFieldUpdateOperationsInput | string
    input?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    order?: ServiceOrderUpdateOneRequiredWithoutRegister_hoursNestedInput
  }

  export type Register_hoursUncheckedUpdateWithoutUserInput = {
    id_register?: StringFieldUpdateOperationsInput | string
    id_order?: StringFieldUpdateOperationsInput | string
    input?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Register_hoursUncheckedUpdateManyWithoutUserInput = {
    id_register?: StringFieldUpdateOperationsInput | string
    id_order?: StringFieldUpdateOperationsInput | string
    input?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ServiceOrderUpdateWithoutUsersInput = {
    id_order?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    register_hours?: Register_hoursUpdateManyWithoutOrderNestedInput
  }

  export type ServiceOrderUncheckedUpdateWithoutUsersInput = {
    id_order?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    register_hours?: Register_hoursUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type ServiceOrderUncheckedUpdateManyWithoutUsersInput = {
    id_order?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Register_hoursCreateManyOrderInput = {
    id_register?: string
    id_user: string
    input?: Date | string | null
    exit?: Date | string | null
    active?: boolean | null
    created_at?: Date | string
    updated_at?: Date | string | null
    delete_at?: Date | string | null
  }

  export type Register_hoursUpdateWithoutOrderInput = {
    id_register?: StringFieldUpdateOperationsInput | string
    input?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutRegister_hoursNestedInput
  }

  export type Register_hoursUncheckedUpdateWithoutOrderInput = {
    id_register?: StringFieldUpdateOperationsInput | string
    id_user?: StringFieldUpdateOperationsInput | string
    input?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Register_hoursUncheckedUpdateManyWithoutOrderInput = {
    id_register?: StringFieldUpdateOperationsInput | string
    id_user?: StringFieldUpdateOperationsInput | string
    input?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    exit?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delete_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUpdateWithoutService_ordersInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    register_hours?: Register_hoursUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutService_ordersInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    register_hours?: Register_hoursUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutService_ordersInput = {
    id?: StringFieldUpdateOperationsInput | string
    tag?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ServiceOrderCountOutputTypeDefaultArgs instead
     */
    export type ServiceOrderCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ServiceOrderCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Register_hoursDefaultArgs instead
     */
    export type Register_hoursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Register_hoursDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ServiceOrderDefaultArgs instead
     */
    export type ServiceOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ServiceOrderDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}