{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hugoj\\\\OneDrive\\\\Documentos\\\\Tag-RFID\\\\front\\\\src\\\\components\\\\TagForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport useWebSocket from 'react-use-websocket';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TagForm = () => {\n  _s();\n  const [tagInput, setTagInput] = useState('');\n  const socketUrl = 'ws://localhost:8082'; // Substitua pelo URL real do seu servidor WebSocket\n  const {\n    sendMessage\n  } = useWebSocket(socketUrl);\n  const handleInputChange = event => {\n    setTagInput(event.target.value);\n  };\n  const sendTag = async () => {\n    try {\n      if (tagInput.trim() !== '') {\n        // Enviar a tag para o servidor via WebSocket\n        sendMessage({\n          data: JSON.stringify({\n            tag: tagInput\n          })\n        });\n        console.log('Sent tag via WebSocket:', tagInput);\n      }\n    } catch (error) {\n      console.error('Erro ao processar dados:', error);\n    }\n  };\n\n  // Assim que receber a mensagem do WebSocket, atualizar o estado com a tag recebida\n  const handleWebSocketMessage = message => {\n    const data = JSON.parse(message.data);\n    console.log('Received message from WebSocket:', data);\n\n    // Colocar a identificação da tag no input\n    setTagInput(data.tag);\n  };\n\n  // Configurar o hook useWebSocket com a função de callback para mensagens\n  useWebSocket(socketUrl, {\n    onMessage: handleWebSocketMessage\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      // Chamar a API GET para obter a identificação mais recente, se necessário\n      try {\n        var _response$data, _response$data$data;\n        const response = await axios.get('http://localhost:8082/tags');\n        const tagFromAPI = (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$data = _response$data.data) === null || _response$data$data === void 0 ? void 0 : _response$data$data.tag;\n        if (tagFromAPI) {\n          setTagInput(tagFromAPI);\n        } else {\n          console.error('A resposta da API não contém a propriedade \"tag\".', response.data);\n        }\n      } catch (error) {\n        console.error('Erro ao obter a identificação da tag:', error);\n      }\n    };\n    fetchData();\n  }, []); // Executar apenas uma vez no carregamento inicial\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Create Tag (React)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"tagInput\",\n        children: \"Tag:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"tagInput\",\n        value: tagInput,\n        onChange: handleInputChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: sendTag,\n        children: \"Create Tag\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(TagForm, \"1q0OaHIugM0O5pftNDAJ5GylmMk=\", false, function () {\n  return [useWebSocket, useWebSocket];\n});\n_c = TagForm;\nexport default TagForm;\nvar _c;\n$RefreshReg$(_c, \"TagForm\");","map":{"version":3,"names":["React","useState","useEffect","useWebSocket","axios","jsxDEV","_jsxDEV","TagForm","_s","tagInput","setTagInput","socketUrl","sendMessage","handleInputChange","event","target","value","sendTag","trim","data","JSON","stringify","tag","console","log","error","handleWebSocketMessage","message","parse","onMessage","fetchData","_response$data","_response$data$data","response","get","tagFromAPI","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","onChange","required","onClick","_c","$RefreshReg$"],"sources":["C:/Users/hugoj/OneDrive/Documentos/Tag-RFID/front/src/components/TagForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport  useWebSocket from 'react-use-websocket';\r\nimport axios from 'axios';\r\n\r\nconst TagForm = () => {\r\n  const [tagInput, setTagInput] = useState('');\r\n  const socketUrl = 'ws://localhost:8082'; // Substitua pelo URL real do seu servidor WebSocket\r\n  const { sendMessage } = useWebSocket(socketUrl);\r\n\r\n  const handleInputChange = (event) => {\r\n    setTagInput(event.target.value);\r\n  };\r\n\r\n  const sendTag = async () => {\r\n    try {\r\n      if (tagInput.trim() !== '') {\r\n        // Enviar a tag para o servidor via WebSocket\r\n        sendMessage({ data: JSON.stringify({ tag: tagInput }) });\r\n        console.log('Sent tag via WebSocket:', tagInput);\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro ao processar dados:', error);\r\n    }\r\n  };\r\n\r\n  // Assim que receber a mensagem do WebSocket, atualizar o estado com a tag recebida\r\n  const handleWebSocketMessage = (message) => {\r\n    const data = JSON.parse(message.data);\r\n    console.log('Received message from WebSocket:', data);\r\n\r\n    // Colocar a identificação da tag no input\r\n    setTagInput(data.tag);\r\n  };\r\n\r\n  // Configurar o hook useWebSocket com a função de callback para mensagens\r\n  useWebSocket(socketUrl, { onMessage: handleWebSocketMessage });\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      // Chamar a API GET para obter a identificação mais recente, se necessário\r\n      try {\r\n        const response = await axios.get('http://localhost:8082/tags');\r\n        const tagFromAPI = response.data?.data?.tag;\r\n\r\n        if (tagFromAPI) {\r\n          setTagInput(tagFromAPI);\r\n        } else {\r\n          console.error('A resposta da API não contém a propriedade \"tag\".', response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error('Erro ao obter a identificação da tag:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []); // Executar apenas uma vez no carregamento inicial\r\n\r\n  return (\r\n    <div>\r\n      <h1>Create Tag (React)</h1>\r\n      <form>\r\n        <label htmlFor=\"tagInput\">Tag:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"tagInput\"\r\n          value={tagInput}\r\n          onChange={handleInputChange}\r\n          required\r\n        />\r\n        <button type=\"button\" onClick={sendTag}>\r\n          Create Tag\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TagForm;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}